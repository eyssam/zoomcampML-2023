#Question 1: Version of Pipenv
#Pour installer Pipenv
pip install --user pipenv
pipenv --version

#Question 2: Checksum for Scikit-Learn 1.3.1
#Create an empty folder for your homework:
mkdir homework_folder
cd homework_folder
#Initialize a new Pipenv environment in the folder:
pipenv --python 3.8  # You can specify the Python version you want to use
Install Scikit-Learn version 1.3.1:
#Check the Pipfile.lock for the hash of Scikit-Learn:
cat Pipfile.lock
#To get the first hash for Scikit-Learn in Pipfile.lock
pipenv run python -m pip freeze | grep -v "==" | grep -v ">" | grep -v "<"

#Question 3: Probability of getting a credit (Script)
import pickle

# Load the DictVectorizer
with open("dv.bin", "rb") as f:
    dv = pickle.load(f)

# Load the LogisticRegression model
with open("model1.bin", "rb") as f:
    model = pickle.load(f)

# Score the client
client = {"job": "retired", "duration": 445, "poutcome": "success"}
X = dv.transform([client])
proba = model.predict_proba(X)[0][1]

# Print the probability that the client will get a credit
print(proba)

#Question 4: Probability of getting a credit (Flask)
from flask import Flask, request, jsonify
import pickle

# Load the DictVectorizer and LogisticRegression models
with open("dv.bin", "rb") as f:
    dv = pickle.load(f)

with open("model1.bin", "rb") as f:
    model = pickle.load(f)

# Create a Flask app
app = Flask(__name__)

# Define the endpoint for scoring the model
@app.route("/score", methods=["POST"])
def score():
    # Get the client data from the request
    client = request.get_json()

    # Transform the client data into a feature vector
    X = dv.transform([client])

    # Predict the probability that the client will get a credit
    proba = model.predict_proba(X)[0][1]

    # Return the probability to the client
    return jsonify({"proba": proba})

# Start the Flask app
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
#To score the client using requests
import requests

# Set the URL of the web service
url = "http://localhost:5000/score"

# Create a client
client = {"job": "unknown", "duration": 270, "poutcome": "failure"}

# Send a POST request to the web service with the client data
response = requests.post(url, json=client)

# Get the probability from the response
proba = response.json()["proba"]

# Print the probability that the client will get a credit
print(proba)

#Question 5: Size of the base image
docker images --filter reference=svizor/zoomcamp-model:3.10.12-slim

#Question 6: Probability of getting a credit (Docker)

# Install all the dependencies from the Pipenv file
RUN pipenv install

# Copy your Flask script
COPY flask_script.py ./

# Run it with Gunicorn
CMD ["gunicorn", "-w", "4", "-b", "0.0.0.0:5000", "flask_script:app"]
docker build -t my-flask-app 
docker run -d -p 5000:5000 my-flask-app
import requests

# Set the URL of the web service
url = "http://localhost:5000/score"

# Create a client
client = {"job": "retired", "duration": 445, "poutcome": "success"}

# Send a POST request to the web service with the client data
response = requests.post(url, json=client)

# Get the probability from the response
proba = response.json()["proba"]

# Print the probability that the client will get a credit
print(proba)
